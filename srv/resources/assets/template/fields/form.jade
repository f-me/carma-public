//-
  Form field templates.
//-
  Field template must have id in form of <type>-field-template,
  where <type> is field type to be rendered using this
  template, or <name>-<type>-field-template, where <name> is
  the name of field of given type which will be rendered with
  this template. Client code must prefer named templates to
  only-typed ones.

include _form_utils

.field-template#textarea-field-template
  +fieldControlGroup
    textarea.form-control(name="{{ name }}" rows="7"
      style="height: 10em;"
      data-bind="\n\
                 value: {{ name }}Text,\n\
                 valueUpdate: ['afterkeydown', 'afterpaste'],\n\
                 disabled: {{ name }}Disabled,\n\
                 {{# meta.regexp }}\n\
                 css: { warning: {{name}}Regexp }\n\
                 {{/ meta.regexp }}")

.field-template#statictext-field-template
  .control-group
    span(data-bind="text: {{ name }}Text")

.field-template#text-field-template
  +fieldControlGroup
    +defaultInput("Text", "", "afterkeydown")

.field-template#password-field-template
  +fieldControlGroup
    +defaultInput("", "", "change")(placeholder="********")
    .text-right
      button.btn.btn-info(type="button"
        onclick="doPick('passwordPicker', '{{ name }}', event.target);")
        i.icon-white.icon-refresh
        | Создать пароль

.field-template#datetime-field-template
  +fieldControlGroup
    +defaultInput("DateTime", "addMask: 'datetime'", "change")

.field-template#date-field-template
  +fieldControlGroup
    +dateInput("", "", "afterkeydown")

.field-template#interval-datetime-field-template
  +fieldControlGroup
    .row
      .col-sm-6
        +rawDateInput(".begin", "", 'change')
      .col-sm-6
        +rawDateInput(".end", "", 'change')

.field-template#phone-field-template
  +fieldControlGroup
    .input-group.input-group-sm
      +defaultInput("","","afterkeydown")(
        onkeyDown="kdoPick('{{ meta.picker }}', '{{ name }}', 73, event);")
      span.input-group-addon
        span.glyphicon.stolen-icon-phone(onclick="doPick('{{ meta.picker }}',\
                                                    '{{ name }}');")

.field-template#force-find-dictionary-field-template
  +dict("Local", "glyphicon-search")

.field-template#dictionary-field-template
  +dict("Local", "glyphicon-chevron-down")

.field-template#dictionary-many-field-template
  +dictMany("Many", "glyphicon-chevron-down")

//- Picker which fills fields with stored data
.field-template#picker-field-template
  +fieldControlGroup
    .input-group.input-group-sm
      +defaultInput("", "", "afterkeydown")(
        onkeyDown="edoPick('{{ meta.picker }}', '{{ name }}', 13, event);")
      span.input-group-addon
        span.glyphicon.glyphicon-search(onclick="doPick('{{ meta.picker }}',\
                                               '{{ name }}', event.target);")

//- radio widget for flat dictionary fields -->
.field-template#radio-field-template
  +fieldControlGroup
    | {{# dictionary.source }}
    label.radio
    //- Mustache.js contexts support bubbling -->
    input.form-control(type="radio"
          name="{{ name }}"
          value="{{ value }}"
          data-bind="checked: {{ name }}, disabled: {{ name }}Disabled")
    | {{ label }}
    | {{/ dictionary.source }

//- May be used for plain rendering of flat dictionaries as well -->
.field-template#select-field-template
  +fieldControlGroup
    select(name="{{ name }}"
           data-bind="\n\
                      value: {{ name }},\n\
                      valueUpdate: 'change',\n\
                      disabled: {{ name }}Disabled")
    | {{# dictionary.entries }}
    option(value="{{value}}")
      | {{meta.label}}
    | {{/ dictionary.entries }}

///////////////////////////////////////////////////////////

// type=Bool field
#Bool-field-template.field-template(type='text/template')
  +checkboxTpl("{{ name }}")

// type=checkbox field
#checkbox-field-template.field-template(type='text/template')
  +checkboxTpl("{{ name }}")

#checkbutton-field-template.field-template(type='text/template')
  .form-group
    .checkbox.checkbutton
      label
        input(type='checkbox'
              name='{{ name }}'
              data-bind="checked: {{ name }},\
                         valueUpdate: 'change',\
                         disabled: {{ name }}Disabled")
        span.btn.btn-success(data-bind='disabled: {{ name }}Disabled',
                             onclick='successfulSave.call(this);')
          | {{ meta.label }}
        span.save-result

// // OpenLayers map container field
#map-field-template.field-template(type='text/template')
  .control-group
    .controls
      div.osMap(name='{{ name }}' id="{{ viewName }}-{{ name }}")

// NOP here — references are rendered after model has loaded
#reference-field-template.field-template(type='text/template')
  .form-group
    .row.col-sm-11.col-sm-offset-1
      span.accordion(id="{{ modelName }}-{{ cid }}-{{ name }}-references")
    .row.col-sm-offset-4.col-sm-8
      | {{# meta.model}}
      #add-reference-button
        button.dropdown-toggle.btn.btn-action(
          data-bind='bindClick: add{{ name }}'
          type='button')
          span.glyphicon.glyphicon-plus
          | {{ meta.reference-label }}
      | {{/ meta.model}}

// Container field template for attachment reference list, with upload
// form. See also files-reference-template for each item template.
#inline-uploader-field-template.field-template(type='text/template')
  +fieldControlGroup
    form.form(data-bind="\n\
      attr: { action: '/upload/{{ modelName }}/'+maybeId()+'/{{ name }}'},\
      {{#meta.single-uploader}} \n\
      visible: _.isEmpty({{name}}()),\n\
      {{/meta.single-uploader}}\n\
      setdata: {{ name }}"
      style='margin-bottom: 0;')

      // File chooser widget
      .input-group.input-group-sm
        input.form-control(type="text" readonly)
        .input-group-btn
          span.btn.btn-default.btn-file
            span.glyphicon.glyphicon-folder-open
            input.upload-dialog(type="file")
          a.btn.btn-primary#upload-send(
              onclick="inlineUploadFile($(this).closest('form'), event);")
            span.glyphicon.glyphicon-upload
    div(id="{{ modelName }}-{{ cid }}-{{ name }}-references")

//- Special template used to render first field of group in parent view.
#group-field-template.field-template(type='text/template')
  .form-group.has-feedback
    label.control-label.col-sm-4
      +labelWithInfo("{{ name }}")

    .col-sm-8
      .input-group.input-group-sm
        input.form-control(type='text'
                        name='name'
                        autocomplete='off'
                        style="{{# meta.transform }}\n\
                               text-transform:{{meta.transform}};\n\
                               {{/ meta.transform }}"
                        onfocus="showComplex('{{ viewName }}', '{{ name }}');"
                        data-bind="value: {{ name }},\
                                   valueUpdate: 'afterkeydown',\
                                   disabled: {{ name }}Disabled")
        +savingSpinner
        span.input-group-addon(
            onclick="showComplex('{{ viewName }}', '{{ name }}');")
          span.glyphicon.glyphicon-share

// Template for fields with unknown type
.field-template#unknown-field-template
  .form-control
    span.label.label-danger
      | (Ошибка — поле {{ names }} неизвестного типа)

// Template for fields with unknown type
.field-template#dict-objects-field-template
  +fieldControlGroup
    .form-horizontal(data-bind="foreach: {{ name }}Objects")
      .form-group
        label.control-label.col-sm-4
          span(data-bind="text: keyLocal")
          a.text-error(href="#"
              data-bind="click: $parent.{{name}}DeleteObj")
              | &nbsp;×
        .col-sm-8
          .input-group.input-group-sm
            input.form-control(type="text"
              autocomplete="off"
              style="{{# meta.transform }}\n\
                     text-transform:{{meta.transform}};\n\
                     {{/ meta.transform }}"
              data-bind="value: value,\n\
                         valueUpdate: 'afterkeydown',\n\
                         {{# meta.regexp }}\n\
                         css: { 're-failed': regexp }\n\
                         {{/ meta.regexp }}")
      | {{# meta.showNote }}
      .form-group
        label.control-label.col-sm-4 {{ meta.noteLabel }}
        .col-sm-8.input-group.input-group-sm
          input.form-control.pane-span.focusable(type="text"
              autocomplete="off"
              data-bind="value: note, valueUpdate: 'afterkeydown'")
      | {{/ meta.showNote }}

    .dropup
      button.dropdown-toggle.btn.btn-action(type="button"
        data-toggle="dropdown")
        span.glyphicon.glyphicon-plus
        | &nbsp;{{ meta.addLabel }}
      ul.dropdown-menu(data-bind="foreach: {{name}}KeyDictionary")
        li
          a(data-bind="text: label, click: $parent.{{name}}AddObj"
            href="#")

#Case-caseStatus-field-template.field-template
  +fieldControlGroup
    +dictInput("Local")
    .input-group.input-group-sm.btn-vert-block
      .btn-block.hidden
      .btn-block(
        data-toggle="tooltip"
        data-html="true"
        data-placement="bottom"
        data-bind='attr: { title: buttons.needInfo.tooltip }, \
                   visible: buttons.needInfo.visible')
        button.btn.btn-small.btn-info(
          style="width: 100%"
          id="{{name}}-needInfo"
          data-bind='disabled: buttons.needInfo.disabled,\
                     click: buttons.needInfo.click')
          span.glyphicon.glyphicon-info-sign
          |&nbsp;
          span(data-bind='text: buttons.needInfo.text')

#svcStatus-field-template.field-template
  +fieldControlGroup
    +dictInput("Local")
    .input-group.input-group-sm.btn-vert-block
      // invisible block to keep top margin when changing visibility
      .btn-block.hidden
      .svc-status-button.btn-block(
        data-bind="attr: { title: buttons.backoffice.tooltip },\
                   visible: buttons.backoffice.visible")
        button.btn.btn-small.btn-info(
          style="width:100%"
          data-bind='disabled: buttons.backoffice.disabled,\
                     click: buttons.backoffice.click')
          span.glyphicon.glyphicon-play
          |&nbsp;
          span(data-bind='text: buttons.backoffice.text')
      .svc-status-button.btn-block(
        data-bind="visible: buttons.recallClient.visible")
        button.btn.btn-small.btn-info(
          style="width:100%"
          data-bind='click: buttons.recallClient.click')
          span.glyphicon.glyphicon-time
          | &nbsp;
          span(data-bind='text: buttons.recallClient.text')

#partner-field-template.field-template
  +fieldControlGroup
      input.form-control(type='text'
        name='{{ name }}'
        data-bind='value: {{ name }}')
      span.input-group-addon(
          data-bind='click: openPartnerSearch.bind($data, \'{{ name }}\')')
        span.glyphicon.glyphicon-search

// Modal dialog launch button
#modalDialogButton-field-template.field-template
  .control-group
    .controls.checkbutton
      label.inline
        button.btn.btn-danger(type='button'
          data-bind='disabled: {{ name }}Disabled, click: {{meta.click}}')
            | {{ meta.label}}

// NOP here — IdentList references are rendered after model has loaded
#IdentList-field-template.field-template
  .control-group
    .control-label
      label {{ meta.label }}
    .controls
      span.accordion(id="{{ modelName }}-{{ cid }}-{{ name }}-references")
    | {{# meta.model}}
    #add-reference-button.controls
      button.dropdown-toggle.btn.btn-action(
        data-bind='bindClick: add{{ name }}'
        type='button')
        i.icon.icon-plus
        | {{ meta.reference-label }}
    | {{/ meta.model}}

// File upload template
#file-field-template.field-template(type='text/template')
  span.glyphicon.glyphicon-folder-open
  | &nbsp;
  a.file-name(data-bind='attr: { href: {{ name }}Url }, text: {{ name }}')

// Modal dialog template
#modalDialog-field-template.field-template(type='text/template')
  .modal.fade(id="{{ id }}-modal")
    .modal-dialog
      .modal-content
        .modal-header
          .alert(id="{{ id }}-alert-container")
            button.close(type='button') ×
            .alert-message
          h4.modal-title {{ title }}
        .modal-body.form-horizontal(id="{{ id }}-form")
        .modal-footer
          button.btn.btn-primary(id="{{ id }}-save") {{ saveLabel }}
          button.btn(data-dismiss='modal', aria-hidden='true') {{ cancelLabel}}

// Group view container
.group-template(id="-group-template" type='text/template')
  fieldset.complex-field(id="{{ refView }}" style='display: none;')
    row.complex-field-close-container
      button.close.complex-field-close(onclick='hideComplex()')
        span(aria-hidden="true") &times;
        span.sr-only Close
    .row
      .col-md-12
        .content.form-horizontal


//
  Template for one of references.
  Must generate id="{{ refView }}" element which
  will hold contents of referenced model. Its class must be is
  {{ refClass }}.
  "{{ refView }}-perms" will be used for instance permissions.
  May setup on-demand loading function.

mixin refCommon(headingDataBind)
  .panel-group(id="{{ refView }}-group")
    .panel.panel-default
      .panel-heading(id="{{ refView }}-link"
                       data-parent="{{ refView }}-group"
                       data-target="#{{ refView }}-head"
                       data-toggle="collapse"
                       data-bind=headingDataBind)
        h4.panel-title
          block
      .panel-collapse.collapse(id="{{ refView }}-head")
        .panel-body
          .form-horizontal(class="{{ refClass }}" id="{{ refView }}")
          // Instance contents are rendered here

mixin simpleRefHdr(name, bindName)
  a.icon.icon-remove
  a(data-bind="text: #{bindName}")= name

#services-reference-template.reference-template
  +refCommon('style: {"background-color": _svcColor}')
    span &nbsp;
    a(data-bind='text: _meta.model.title') Услуга…
    span &nbsp;
    a.btn.btn-mini.btn-default(
      data-bind="attr: { href: '#printSrv/' + id() }"
      target='_blank')
      span.glyphicon.glyphicon-print
      | &nbsp;Печать
    span &nbsp;
    button.btn.btn-mini.btn-danger(
      data-bind='visible: buttons.mistake.visible,\
                 click: buttons.mistake.click')
      span.glyphicon.glyphicon-remove
      | &nbsp;
      span(data-bind='text: buttons.mistake.text')


#partner_services-reference-template.reference-template
  +refCommon
    +simpleRefHdr("Тариф", "serviceNameLocal")

// SubProgram.services (SubProgramService model) reference template
#subprogram-services-reference-template.reference-template
  +refCommon
    +simpleRefHdr("Услуга", "typeLocal")

#subprogram-contacts-reference-template.reference-template
  +refCommon
    a.icon.icon-remove
    span(data-bind='text: [name(), email(), phone()].join(\' \')')

#subprogram-contract-fields-reference-template.reference-template
  +refCommon
    +simpleRefHdr("Поле", "contractFieldLocal")

#files-reference-template.reference-template
  div
    a.detach-button.text-error(href='#'
       onclick='inlineDetachFile($(this)); return false'
       data-attachment='{{ refId }}'
       data-field='{{ refField }}')
      | × &nbsp;
    span(id="{{ refView }}" class="{{ refClass }}")
    // Attachment contents are rendered here

#actions-reference-template.reference-template
  +refCommon('style: {"background-color": _actColor}')
    span.glyphicon.glyphicon-flag(data-bind='visible: myAction')
    span(data-bind='visible: myAction')
      | &nbsp;
    a(style='padding-left: 0', data-bind='html: actionNameLocal')
      | Действие…

mixin caseFilesList
  ul.unstyled(data-bind="foreach: safelyGet(\'filesReference\')")
    li
      span.glyphicon.glyphicon-folder-open
      | &nbsp;
      a.file-name(data-bind="attr: { href: filenameUrl }, text: filename")

// Default case group view template
#default-case-group-template.group-template
  fieldset#default-case.complex-field.default-complex-field
    p
      b Кто звонил:&nbsp;
      span(data-bind='text: safelyGet(\'contact_name\')')
      span(data-bind='text: " " + safelyGet("contact_phone1")')
      span(data-bind='\
        visible: safelyGet("contact_phone2"),\
        text: ", " + safelyGet("contact_phone2")')
      span(data-bind='\
        visible: safelyGet("contact_phone3"),\
        text: ", " + safelyGet("contact_phone3")')
      span(data-bind='\
        visible: safelyGet("contact_phone4"),\
        text: ", " + safelyGet("contact_phone4")')
    p(data-bind='visible: safelyGet(\'car_make\')')
      b Автомобиль:&nbsp;
      span(data-bind='text: safelyGet(\'car_makeLocal\')')
      &nbsp;
      span(data-bind='text: safelyGet(\'car_modelLocal\')')
      &nbsp;
      span(data-bind='text: safelyGet(\'car_plateNum\')')
    p(data-bind='visible: safelyGet(\'caseAddress_address\')')
      b Адрес кейса:&nbsp;
      span(data-bind='text: safelyGet(\'caseAddress_address\')')
      br
      span(data-bind='text: safelyGet(\'caseAddress_comment\')')
    p(data-bind='visible: safelyGet(\'cityLocal\')')
      b Регион:&nbsp;
      span(data-bind='text: safelyGet(\'region\')')
    p(data-bind='visible: safelyGet(\'cityLocal\')')
      b
        | Расчётное значение ожидания эвакуатора в
        | г.
        span(data-bind='text: safelyGet(\'cityLocal\')')
        | :&nbsp;
      span#city-towage-average-time
    #contract
    .program
      #case-files(data-bind="visible: hasFiles")
        legend Прикреплённые файлы
        +caseFilesList
        dl(data-bind="foreach: servicesReference")
          dt(data-bind="visible: safelyGet(\'filesReference\').length, text: _meta.model.title")
            dd
              +caseFilesList
      #case-comments
        legend  Комментарий
        .form-group
          textarea.form-control#case-comments-i(rows='2', style="width: 100%;")
        .form-group
          button#case-comments-b.btn
            | Добавить комментарий
      legend История звонков
      table#call-searchtable.table.table-striped.table-bordered
        thead
          tr
            th Дата
            th Сотрудник РАМК
            th Тип коммуникации
            th Комментарий
            th Результат действия
        tbody

#permission-template
  .form-group
    .col-md-offset-4.col-md-8
      | {{# readonly }}
      button.btn.disabled(type="button")
        span.glyphicon.glyphicon-circle
          | Только для чтения
      | {{/ readonly }}
      | {{^ readonly }}
      button.btn.btn-success(type="button"
              onClick="saveInstance('{{ viewName }}');successfulSave.call(this);")
        span.glyphicon.glyphicon-pencil
        | Сохранить
      span.save-result
      | {{/ readonly }}

#empty-fields-template
  ul#empty-fields
    | {{# fields }}
    li(onclick="focusField('{{name}}'); return false;"
      data-bind="css: { 'text-danger': {{name}}Not }, visible: {{name}}Not")
      | {{meta.label}}
    | {{/ fields }}

#service-picker-template
  ul.nav.nav-pills
    li(class="drop{{drop}}")
      button.dropdown-toggle.btn.btn-action(type="button" data-toggle="dropdown")
        span.glyphicon.glyphicon-plus
        | Добавить услугу
      ul.dropdown-menu
        | {{# dictionary.source }}
        li
          a(href="#" onclick="addService('{{model}}'); return false;")
            span.glyphicon(class="glyphicon-{{icon}}")
            | {{ label }}
        | {{/ dictionary.source }}

#alert-template(type='text/html')
  .alert
    button(type="button" class="close" data-dismiss="alert") ×
    strong Внимание!
    | {{message}}

#contract-content-template(type='text/html')
  #contract-content(data-bind="renderContract: '{{ title }}'")

#callType-special-field-template.field-template
  .form-group
    .col-sm-4(data-bind="with: callType.btn")
      button.btn.btn-danger.btn-sm(
        data-bind="click: click, visible: visible")
        span(data-bind="text: text")
    .col-sm-8
      p.form-control-static
        strong(data-bind="text: callType.local")
